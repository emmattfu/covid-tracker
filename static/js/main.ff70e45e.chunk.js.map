{"version":3,"sources":["api/index.js","components/InfoCard.js","context/CountryContext.js","components/CountryPicker.js","components/Chart.js","App.js","serviceWorker.js","index.js"],"names":["apiUrl","getData","country","a","flexibleUrl","fetch","response","json","confirmed","recovered","deaths","lastUpdate","changedData","console","log","getDailyData","data","map","dailyData","total","date","reportDate","getCountries","countries","name","InfoCard","Row","className","Col","xl","sm","md","Card","border","Header","Body","Title","start","end","value","duration","separator","Subtitle","Date","toLocaleDateString","Text","CountryContext","React","createContext","CountryPicker","useState","setCountries","changeCountry","useContext","useEffect","fetchData","Form","Control","as","custom","style","width","margin","onChange","e","target","i","key","Chart","setDailyData","fetchDailyData","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","App","setData","setCountry","myData","Provider","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ff70e45e.chunk.js","sourcesContent":["const apiUrl = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const getData = async (country) => {\r\n    let flexibleUrl = apiUrl\r\n\r\n    if(country) {\r\n        flexibleUrl = `${apiUrl}/countries/${country}`\r\n    }\r\n\r\n  try {\r\n    const response = await fetch(flexibleUrl);\r\n    const { confirmed, recovered, deaths, lastUpdate } = await response.json();\r\n\r\n    const changedData = {\r\n      confirmed,\r\n      recovered,\r\n      deaths,\r\n      lastUpdate,\r\n    };\r\n\r\n    return changedData;\r\n  } catch (error) {\r\n      console.log(error)\r\n  }\r\n};\r\n\r\nexport const getDailyData = async () => {\r\n    try {\r\n        const response = await fetch(`${apiUrl}/daily`)\r\n        const data = await response.json()\r\n        const changedData = data.map(dailyData => ({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate\r\n        }))\r\n\r\n        return changedData\r\n    } catch(error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const getCountries = async () => {\r\n    try {\r\n        const response = await fetch(`${apiUrl}/countries`)\r\n        const {countries} = await response.json()\r\n        const changedData = countries.map(country => country.name)\r\n        \r\n        return changedData\r\n    } catch(error) {\r\n        console.log(error)\r\n    }\r\n}","import React from \"react\";\r\nimport { Card, Row, Col } from \"react-bootstrap\";\r\nimport CountUp from 'react-countup'\r\n\r\nfunction InfoCard({data: {confirmed, recovered, deaths, lastUpdate}}) {\r\n\r\n    if (!confirmed) {\r\n        return (\r\n          \r\n            <h1>Loading...</h1>\r\n    \r\n        )\r\n      }\r\n\r\n  return (\r\n    <Row className='justify-content-center'>\r\n      <Col className='flex-grow-0' xl={3} sm={12} md={4}>\r\n        <Card border=\"primary mt-3\">\r\n          <Card.Header>Infected</Card.Header>\r\n          <Card.Body>\r\n            <Card.Title>\r\n                <CountUp start={0} end={confirmed.value} duration={2}  separator=\",\"/>\r\n            </Card.Title>\r\n            <Card.Subtitle>{new Date(lastUpdate).toLocaleDateString()}</Card.Subtitle>\r\n            <Card.Text>\r\n              Number of active cases of COVID-19\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n\r\n      <Col className='flex-grow-0' xl={3} sm={12} md={4}>\r\n        <Card border=\"success mt-3\">\r\n          <Card.Header>Recovered</Card.Header>\r\n          <Card.Body>\r\n            <Card.Title>\r\n                <CountUp start={0} end={recovered.value} duration={2}  separator=\",\"/>\r\n            </Card.Title>\r\n            <Card.Subtitle>{new Date(lastUpdate).toLocaleDateString()}</Card.Subtitle>\r\n            <Card.Text>\r\n              Number of recovered from COVID-19\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n\r\n      <Col className='flex-grow-0' xl={3} sm={12} md={4}>\r\n        <Card border=\"danger mt-3\">\r\n          <Card.Header>Deaths</Card.Header>\r\n          <Card.Body>\r\n            <Card.Title>\r\n            <CountUp start={0} end={deaths.value} duration={2}  separator=\",\"/>\r\n            </Card.Title>\r\n            <Card.Subtitle>{new Date(lastUpdate).toLocaleDateString()}</Card.Subtitle>\r\n            <Card.Text>\r\n              Number of deaths caused by COVID-19\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default InfoCard;\r\n","import React from 'react'\r\n\r\nexport const CountryContext = React.createContext()","import React, {useState, useEffect, useContext} from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport {getCountries} from '../api'\r\nimport {CountryContext} from '../context/CountryContext'\r\n\r\nfunction CountryPicker() {\r\n    const [countries, setCountries] = useState([])\r\n    const {changeCountry} = useContext(CountryContext)\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            setCountries(await getCountries())\r\n        } \r\n\r\n        fetchData()\r\n    }, [])\r\n\r\n  return (\r\n    <div className=\"country-picker d-flex justify-content-center\">\r\n      <Form.Control\r\n        as=\"select\"\r\n        custom\r\n        style={{ width: \"50%\", margin: \"15px auto\" }}\r\n        onChange={(e) =>changeCountry(e.target.value)}\r\n      >\r\n        <option value=\"\">Global</option>\r\n        {countries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n      </Form.Control>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React, {useState, useEffect} from 'react'\r\nimport {getDailyData} from '../api'\r\nimport {Line, Bar} from 'react-chartjs-2'\r\n\r\nfunction Chart({data: {confirmed, recovered, deaths}, country}) {\r\n    const [dailyData, setDailyData] = useState([])\r\n\r\n    useEffect(() => {\r\n       async function fetchDailyData() {\r\n           const data = await getDailyData()\r\n           setDailyData(data)\r\n       }\r\n\r\n       fetchDailyData()\r\n    }, [dailyData])\r\n\r\n    const barChart = (\r\n        confirmed ? (\r\n          <Bar\r\n            data={{\r\n              labels: ['Infected', 'Recovered', 'Deaths'],\r\n              datasets: [\r\n                {\r\n                  label: 'People',\r\n                  backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                  data: [confirmed.value, recovered.value, deaths.value],\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              legend: { display: false },\r\n              title: { display: true, text: `Current state in ${country}` },\r\n            }}\r\n          />\r\n        ) : null\r\n      );\r\n\r\n\r\n    const lineChart = (\r\n        dailyData.length ? \r\n        (\r\n            <Line \r\n            data={{\r\n                labels: dailyData.map(({date}) => date),\r\n                datasets: [{\r\n                    data: dailyData.map(({confirmed}) => confirmed),\r\n                    label: 'Infected',\r\n                    borderColor: '#3333ff',\r\n                    fill: true \r\n                }, {\r\n                    data: dailyData.map(({deaths}) => deaths),\r\n                    label: 'Deaths',\r\n                    borderColor: 'red',\r\n                    backgroundColor: 'rgba(225, 0, 0, 0.5)',\r\n                    fill: true \r\n                }]\r\n            }}\r\n            />\r\n        ) : null\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {country ? barChart : lineChart}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chart","import React, {useState, useEffect} from 'react'\n\nimport './App.css'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport {Container} from 'react-bootstrap'\nimport {getData} from './api'\nimport InfoCard from './components/InfoCard'\nimport CountryPicker from './components/CountryPicker'\nimport Chart from './components/Chart'\nimport { CountryContext } from './context/CountryContext'\n\nfunction App() {\n  const [data, setData] = useState({})\n  const [country, setCountry] = useState('')\n\n  useEffect(() => {\n    async function myData() {\n      const data = await getData(country)\n      setData(data)\n    }\n\n    myData()\n  }, [country])\n\n  const changeCountry = async (country) => {\n    setCountry(country)\n  }\n\n  return (\n    <CountryContext.Provider value = {{changeCountry}}>\n      <div className=\"App\">\n        <Container>\n          <h1 className=\"text-center\" style={{margin: '25px 0'}}>COVID-19 Tracker</h1>\n          <InfoCard data={data}/>\n          <CountryPicker />\n          <Chart data={data} country={country}/>\n        </Container>\n      </div>\n    </CountryContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}